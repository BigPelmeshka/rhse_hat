import json
import logging
import os
import random
from datetime import datetime, timedelta

import pytz
import telebot
from telebot.types import InlineKeyboardButton as IKB
from telebot.types import InlineKeyboardMarkup as IKM
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.constants import ParseMode
from telegram.error import Forbidden
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from config import BOT_TOKEN_HAT as TOKEN_HAT
from config import BOT_TOKEN_HAT_ADMIN as TOKEN

HQ_ID = 151466050

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

PROCESSING_REQUEST, ASK_DETAILS, IM_IN = range(3)
HOURS = 4


async def send_base_message(update: Update, context: ContextTypes.DEFAULT_TYPE):

    button1 = InlineKeyboardButton(
        text="üìù –ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å",
        callback_data="create_notification",
    )
    button2 = InlineKeyboardButton(
        text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
        callback_data="send_notification",
    )
    button3 = InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç",
        callback_data="edit_script",
    )
    button4 = InlineKeyboardButton(
        text="üóë –£–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç",
        callback_data="delete_script",
    )

    buttons = [[button1], [button2], [button3], [button4]]
    reply_keyboard = InlineKeyboardMarkup(buttons)

    await context.bot.send_message(
        chat_id=context.user_data["user_id"],
        text=(
            "\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:\n"
            ">> –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å\n"
            ">> –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
            ">> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç\n"
            ">> –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫\n"
        ),
        parse_mode="HTML",
        reply_markup=reply_keyboard,
    )


async def choose_script():
    directory = f"{os.getcwd()}/scripts"
    files = os.listdir(directory)
    keyboard = []
    for file in files:
        if file.endswith(".txt"):
            keyboard.append(
                [
                    InlineKeyboardButton(
                        text=file.replace(".txt", ""),
                        callback_data=file,
                    )
                ]
            )
    return keyboard, InlineKeyboardMarkup(keyboard)


async def send_result(text="", job_id=""):
    with open(f"{os.getcwd()}/jobs/{job_id}/alarm.json", "r", encoding="utf-8") as file:
        alarm = json.load(file)

    subscribers = alarm["subscribed_users"]

    bot_hat = telebot.TeleBot(TOKEN_HAT)
    for user in subscribers:
        try:
            bot_hat.send_message(chat_id=user, text=text, parse_mode="HTML")
        except Exception as e:
            print(user, e)
            continue


async def send_notification(
    update: Update, context: ContextTypes.DEFAULT_TYPE, text="", user_data="", job_id=""
):
    bot_hat = telebot.TeleBot(TOKEN_HAT)

    reply_keyboard = IKM(
        [
            [
                IKB(text="ü§© –Ø –±—É–¥—É!", callback_data=f"im_in_{job_id}"),
            ],
        ]
    )

    for user in user_data:
        try:
            bot_hat.send_message(chat_id=user, text=text, reply_markup=reply_keyboard)
        except Exception as e:
            print(user, e)
            continue

    return await set_alarms(update=update, context=context, job_id=job_id)


async def set_alarms(
    update: Update, context: ContextTypes.DEFAULT_TYPE, job_id: str = ""
) -> None:

    context.job_queue.run_once(
        run_hat,
        when=HOURS * 60 * 60,
        chat_id=None,
        name=job_id,
        data=context,
    )


async def run_hat(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send the alarm message."""
    job = context.job
    job_id = job.data.chat_data["job_id"]

    with open(f"{os.getcwd()}/jobs/{job_id}/alarm.json", "r", encoding="utf-8") as file:
        alarm = json.load(file)

    with open(f"{os.getcwd()}/users/users.json", "r", encoding="utf-8") as file:
        user_data = json.load(file)

    subscribers = alarm["subscribed_users"]

    chosen_one = random.sample(subscribers, k=min(5, len(subscribers)))

    text = alarm["text"]
    text += "\n\n<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
    for user in chosen_one:
        mention_name = (
            f"{user_data[str(user)]['first_name']} {user_data[str(user)]['last_name']}"
        )
        text += f"<a href='tg://user?id={user}'>{mention_name} </a> \n"

    await send_result(text=text, job_id=job_id)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the conversation and ask user for input."""

    context.user_data.clear()
    context.chat_data.clear()

    context.user_data["user_id"] = update.effective_user.id
    context.user_data["user_name"] = update.effective_user.username
    context.user_data["effective_script"] = None
    context.user_data["script_name"] = None

    await update.message.reply_text(
        text=(
            f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name} {update.effective_user.last_name}! \n–≠—Ç–æ –ê–¥–º–∏–Ω–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—â–µ–π —à–ª—è–ø—ã –¥–ª—è –ú–∞—Å—Ç–µ—Ä-–ö–ª–∞—Å—Å–æ–≤ –†–•–°–ï"
        ),
        parse_mode="HTML",
    )

    await send_base_message(update, context)

    return PROCESSING_REQUEST


async def processing_request(
    update: Update, context: ContextTypes.DEFAULT_TYPE, second_request=None
):

    context.user_data["first_step"] = update.callback_query.data
    keyboard = []
    text = ""

    if (
        update.callback_query.data == "create_notification"
        or second_request == "edit_script"
    ):

        context.user_data["first_step"] = "create_notification"

        text = (
            "–û—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ—á–Ω—ã–π, –º–æ—â–Ω—ã–π, –æ—á–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —Å –†–∞—Ö–ª–µ–Ω–∫–æ, 32.02.2099, —Å 17 –¥–æ 22, –ø–æ –∞–¥—Ä–µ—Å—É –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞—Ç—å –¥.1, –∞—É–¥.404</i>"
        )

        await context.bot.send_message(
            chat_id=update.effective_chat.id, text=text, parse_mode="HTML"
        )

    if update.callback_query.data == "send_notification":

        with open(f"{os.getcwd()}/users/users.json", "r", encoding="utf-8") as file:
            user_data = json.load(file)

        count_users = len(user_data)

        keyboard, reply_markup = await choose_script()

        if keyboard == []:
            await update.callback_query.answer(
                text="–°–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–ø—Ç", show_alert=True
            )

            await send_base_message(update, context)

            return PROCESSING_REQUEST

        text = f"–í—ã–±–µ—Ä–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {count_users} —á–µ–ª–æ–≤–µ–∫"

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            parse_mode="HTML",
            reply_markup=reply_markup,
        )

    if update.callback_query.data == "confirm_send_notification":

        text = context.user_data["effective_script"]
        user_data = context.user_data["user_data"]
        subscribe = context.chat_data["subscribe"]
        job_id = context.chat_data["job_id"]

        with open(
            f"{os.getcwd()}/jobs/{job_id}/alarm.json",
            "w",
            encoding="utf-8",
        ) as file:
            json.dump(
                {
                    "text": text,
                    "subscribe": subscribe,
                    "subscribed_users": [],
                    "subscriptions": [],
                },
                file,
                indent=4,
                ensure_ascii=False,
            )

        await send_notification(
            update=update,
            context=context,
            text=text,
            user_data=user_data,
            job_id=context.chat_data["job_id"],
        )

    if update.callback_query.data == "cancel_send_notification":

        await send_base_message(update, context)

        return PROCESSING_REQUEST

    if update.callback_query.data == "edit_script":

        keyboard, reply_markup = await choose_script()

        if keyboard == []:
            await update.callback_query.answer(
                text="–°–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–ø—Ç", show_alert=True
            )

            await send_base_message(update, context)

            return PROCESSING_REQUEST

        text = "–í—ã–±–µ—Ä–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            parse_mode="HTML",
            reply_markup=reply_markup,
        )

    if update.callback_query.data == "delete_script":
        keyboard, reply_markup = await choose_script()

        if keyboard == []:
            await update.callback_query.answer(
                text="–°–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–ø—Ç", show_alert=True
            )

            await send_base_message(update, context)

            return PROCESSING_REQUEST

        text = "–í—ã–±–µ—Ä–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            parse_mode="HTML",
            reply_markup=reply_markup,
        )
    return ASK_DETAILS


async def ask_details(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if context.user_data["first_step"] == "create_notification":

        message = update.message.text

        try:
            filename = context.user_data["script_to_change"]
        except:
            filename = f"{(datetime.now(tz = pytz.UTC) + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} {context.user_data['user_name']}.txt"

        with open(
            f"{os.getcwd()}/scripts/{filename}",
            "w",
            encoding="utf-8",
        ) as file:
            file.write(message)

        text = f"–°–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–¥ –∏–º–µ–Ω–µ–º {filename}\n\n"

        await update.message.reply_text(text=text)

        await send_base_message(update, context)

        return PROCESSING_REQUEST

    if context.user_data["first_step"] == "send_notification":

        context.chat_data["job_id"] = (
            f"{update.effective_chat.id}_{int(datetime.now().timestamp())}"
        )

        os.makedirs(
            f"{os.getcwd()}/jobs/{update.effective_chat.id}_{int(datetime.now().timestamp())}",
            exist_ok=True,
        )

        directory = f"{os.getcwd()}/scripts"
        files = os.listdir(directory)

        for file in files:
            if file.endswith(".txt") and file == update.callback_query.data:
                with open(directory + "/" + file, "r", encoding="utf-8") as file:
                    text_to_send = file.read()
                break
            break

        with open(f"{os.getcwd()}/users/users.json", "r", encoding="utf-8") as file:
            user_data = json.load(file)

        context.user_data["effective_script"] = (
            text_to_send
            + f"\n\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ <b>–≤ {(datetime.now() + timedelta(hours = 3 + HOURS)).strftime('%d.%m.%Y, %H:%M:%S')}</b>"
        )
        context.user_data["user_data"] = user_data
        context.chat_data["subscribe"] = True

        reply_keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data="confirm_send_notification",
                    ),
                    InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data="cancel_send_notification",
                    ),
                ]
            ],
        )

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                "<i>–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–æ—Ç —Ç–∞–∫:\n\n</i>"
                f"{text_to_send}"
                "\n\n–ù–∞–∂–º–∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç—å, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
            ),
            parse_mode="HTML",
            reply_markup=reply_keyboard,
        )

        return PROCESSING_REQUEST

    if context.user_data["first_step"] == "edit_script":

        context.user_data["script_to_change"] = update.callback_query.data

        return await processing_request(
            update=update, context=context, second_request="edit_script"
        )

    if context.user_data["first_step"] == "delete_script":

        os.remove(f"{os.getcwd()}/scripts/{update.callback_query.data}")

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–°–∫—Ä–∏–ø—Ç {update.callback_query.data} —É–¥–∞–ª–µ–Ω",
            parse_mode="HTML",
        )

        await send_base_message(update, context)

        return PROCESSING_REQUEST


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    bot = context.bot

    await bot.send_message(
        text=("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è ü´∂\n" "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"),
        chat_id=update.effective_chat.id,
        reply_markup=ReplyKeyboardRemove(),
    )

    context.user_data.clear()
    context.chat_data.clear()
    return ConversationHandler.END


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    logger.error("Exception while handling an update:", exc_info=context.error)

    message = "An exception was raised while handling an update\n"
    if type(context.error) == Forbidden:
        try:
            return await cancel(update=update, context=context)
        except:
            pass
        return True

    # Finally, send the message
    await context.bot.send_message(
        chat_id=HQ_ID, text=message, parse_mode=ParseMode.HTML
    )
    logger.info("=" * 80)
    logger.info(
        "Context Error: %s",
        context.error,
    )
    logger.info("=" * 80)

    return await cancel(update=update, context=context)


def main() -> None:
    """Run the bot."""
    application = Application.builder().token(TOKEN).concurrent_updates(True).build()
    # job_queue = application.job_queue

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
        ],
        states={
            PROCESSING_REQUEST: [
                CallbackQueryHandler(
                    processing_request,
                )
            ],
            ASK_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_details),
                CallbackQueryHandler(ask_details, pattern=r"(.*)\.txt(.*)"),
            ],
        },
        fallbacks=[
            CommandHandler("skip", cancel),
        ],
        allow_reentry=True,
    )

    application.add_handler(conv_handler)

    # Handle the case when a user sends /start but they're not in a conversation
    application.add_handler(
        CommandHandler(
            "start",
            start,
        )
    )
    application.add_handler(CommandHandler("skip", cancel))

    application.add_error_handler(error_handler, block=False)

    application.run_polling()


if __name__ == "__main__":
    main()
